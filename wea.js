const form = document.querySelector("section.top-banner form");
// top banner in altÄ±nda ki form u buraya Ã§aÄŸÄ±rmÄ±ÅŸ olduk 
const input = document.querySelector(".container input")
// container clasÄ±nÄ±n altÄ±nda ki input u Ã§aÄŸÄ±rdÄ±k
const msg = document.querySelector("span.msg");
// kullanÄ±cÄ±ya yanlÄ±s girerse uyarÄ± verecek yeri Ã§aÄŸÄ±rdÄ±k
const list = document.querySelector(".ajax-section .cities");
// citiesin iÃ§inde ki liler yani hava durumu kartlarÄ± bana kart olarak gelecek 

localStorage.setItem("tokenKey", EncryptStringAES("a118c3dd09cb98f52ab2cbf3bb695ffd"));
// kullanÄ±cÄ± login oldugunda o kullanÄ±cÄ±yÄ± arka plana alÄ±caz.Veri tabanÄ±ndan cekicez veri tabanÄ±ndan cektiÄŸimiz token Ä±  browserÄ±n storyÄ±sÄ±ne atÄ±caz
// EncryptStringAES yaparak apim yani tokenim ekranda altta konsollde gÃ¶rÃ¼nmesin diye gizlemek iÃ§in EncryptStringAES kodunu kullanarak tokemi gizledim 
// her sayfada her zaman yazmayalÄ±m dÄ±ye bu sekilde yapÄ±caz 
let Api = DecryptStringAES(localStorage.getItem("tokenKey"));
// Burada almÄ±ÅŸ oldugum Api miartÄ±k saklayÄ±p kullanabilirim 
// Buradada DecryptStringAES yÃ¶ntemi ile Api mi yani gizlemiÅŸ oldugum APÄ°mi vscoduma okuttum tanÄ±ttÄ±m 
// console.log(Api)

form.addEventListener("submit", (event) => {
    event.preventDefault();
    getWeatherDataFromApi();
});
// preventDefault yazmamÄ±n sebebi; ben yazÄ±lÄ±mcÄ± olarak diyorum ki senin default olrak gÃ¶revlerini unut benim sana tanÄ±mladÄ±gÄ±m gÃ¶revleri yerine getir diyorum 


//! burada forma tÄ±klandÄ±gÄ±nda formÄ±n iÃ§indeki submit e baglan hem enter hemde mouse la giriÅŸ yapÄ±lsÄ±n ayrÄ± ayrÄ± clik enter iÃ§in fonk oluÅŸmasÄ±n diye bunu yaptÄ±k 
// Burada Form u kullanmamÄ±zÄ±n sebebi de bu hem enter hemde mouse ile girdi yapabilmeyi ikisiini bir arada yapabilelim diye form iÃ§ine aldÄ±k 
// kullanÄ±cÄ± bunlardan birisini yaptÄ±gÄ±ndA getWeatherDataFromApi fonk baÄŸlan dedik 
const getWeatherDataFromApi = async () => {
    // alert("http request is gone!");
    const inputValue = input.value;


    const units = "metric";
    const lang = "tr";
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${inputValue}&appid=${Api}&units=${units}&lang=&${lang}`;

    try {

        const response = await fetch(url).then(response => response.json());
        // Burada apiden veri Ã§Ä±ktÄ±k bu fonk ile 
        console.log(response);

        //! neye ihtiyacÄ±m varsa artÄ±k destrucing yÃ¶ntemi ile yazÄ±yorum  buraya kullanÄ±cam sonra o yÃ¼zden yani
        //! Bu kÄ±sÄ±m artÄ±k gelen verileri ayrÄ±ÅŸtÄ±rma kÄ±smÄ± 
        const { main, sys, weather, name } = response;
        // bunu responseden almamÄ±zÄ±n sebebi fethden gelen url baÄŸlantÄ±sÄ±ndan bana lazÄ±m olanlarÄ± alÄ±yorum destruting bunu saglÄ±yor bize 

        const iconUrl = `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`;
        // icon ekledim burada 
        const iconUrlAWS = `https://s3-us-west-2.amazonaws.com/s.cdpn.io/162656/$%7Bweather[0].icon%7D.svg`;
        // buda ikinci icon ne olur olmaz diye eklendi 


        const cityNameSpans = list.querySelectorAll(".city span");
        const cityNameSpansArray = Array.from(cityNameSpans);
        //! cityNameSpans iÃ§indekileri array e cevirdim 
        // foreAch metodunu kullanmak iÃ§in array a cevirdim foreach metodu arrayÄ±n iÃ§inde gezebiliyor 
        if (cityNameSpansArray.length > 0)
        // Yani bu cityNameArrayin iÃ§inde eleman varsa bu kontrolu yap diyoruz length > 0 diyerek
        {
            const filteredArray = cityNameSpansArray.filter(span => span.innerText == name);
            if (filteredArray.length > 0) {
                msg.innerText = `You already know the weather for ${name}, Please search for another city âœ‹`
                form.reset();
                setTimeout(() => {
                    msg.innerText = "";
                }, 5000);
                return;
            }

        }
        //  lenghtini sÄ±fÄ±rdan bÃ¼yÃ¼kse dememin sebebi burada yani arrayÄ±mÄ±n iÃ§inde eleman yani kart varsa oldugu sÃ¼rece baksÄ±n diye > 0 dan dedik 


        const createdLi = document.createElement("li");
        // yeni bir li oluÅŸturdum html de ve bu kÄ±sÄ±mda da li ye cratedLi dedim 
        createdLi.classList.add("city");
        // buradada olusturdugum li lerin classÄ±na city de dedim classList ile 
        // className de verebilirim ama classList verince baska yerlerdede class Ä± city olan olabilir onlarÄ± ezmemek iÃ§in classList kullanmak daha mantÄ±kklÄ±
        createdLi.innerHTML = `<h2 class="city-name" data-name="${name}, ${sys.country}">
                <span>${name}</span>
                <sup>${sys.country}</sup>
               </h2>
              <div class="city-temp">${Math.round(main.temp)}<sup>Â°C</sup></div>
              <figure>
              <img class="city-icon" src="${iconUrl}">
             <figcaption>${weather[0].description}</figcaption>
              </figure>`;
        //! innerHTML  ekranda gÃ¶rÃ¼lmesini istediÄŸim kod kÄ±smÄ± 
        //! temp yuvarladÄ±k cÃ¼nkÃ¼ ondalÄ±klÄ± sayÄ± olsun istemiyoruz 


        // figure ve figcaptionu kullanma sebebimiz:
        // google algoritmasÄ±nda bizi ceo Ã§alÄ±ÅŸmasÄ±nda Ã¶ne cÄ±karmaya yarayan kullanÄ±m 

        // figyure ve figcaption u Ä±n yerine div ve h2 de kullanabiliriedik evet ama figure ve figcaption u kullanan bir kiÅŸi div ve h2 elemenleri gibi elementleri kullanan kiÅŸinin Ã¶nÃ¼ne Ã§Ä±kÄ±yor .


        //****append vs prepend**//
        // list.append(createdLi);
        //!  Burada yukarÄ±da ul nin iÃ§indekini onun dÄ±sÄ±ndaki sectionu list olarak burada tanÄ±mladÄ±m onun iÃ§ine burada olusturmuÅŸ oldugum kullanÄ±cÄ±nÄ±n girecek oldugu li dedÄŸimiz ÅŸeyi list e at diyoruz 

        // son aradÄ±ÄŸÄ±m ilk olsun diye prepend metonudu kullansak daha iyi o yÃ¼zden prependt metodunu kullancaz ğŸ‘‡
        list.append(createdLi);
        // aÅŸaÄŸÄ±da benim aramÄ±ÅŸ oldugum ÅŸehir varsa bu kartÄ± eklememeli o yÃ¼zden kartÄ± oluÅŸturmadan Ã¶nce o kartÄ±n aynÄ±sÄ±ndan var mÄ± diye kontrolunu yapmam lazÄ±m yani createdLi yi oluÅŸturmadan Ã¶nce bunun kontrolunu yapmam lazÄ±m 
    }
    catch (error) {
        msg.innerText = `404 (City Not Found)`;
        setTimeout(() => {
            msg.innerText = "";
        }, 5000);
    }
    form.reset();
    // butonun iÃ§indeki kullanÄ±cÄ±nÄ±n girdiÄŸi veriler silinsin kalmasÄ±n diye reset diye metotdumuz var onu girince reset yapÄ±yor 
};
